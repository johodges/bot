#!/bin/bash

SHA1EXT=sha1

#run time libraries are located in
#  $HOME/.bundle/BUNDLE/MPI

if [ "$INTEL_MPI_VERSION" != "" ]; then
  intel_mpi_version=$INTEL_MPI_VERSION
fi
if [ "$MPI_VERSION" != "" ]; then
  mpi_version=$MPI_VERSION
fi
if [ "$OPENMPI_DIR" != "" ]; then
  openmpi_dir=$OPENMPI_DIR
fi
APPS=apps

#---------------------------------------------
#                   usage
#---------------------------------------------

function usage {
echo "This script builds a bundle using applications built by firebot, FDS pubs"
echo "built by firebot, Smokeview pubs built by smokebot and other files found"
echo "in the fds, smv and bot repos."
echo ""
echo "Options:"
echo "Parameters specifying branch used to build the bundle"
echo "-b branch_name - use branch named branch_name to make the bundle [default: $BRANCH]"
echo "-r - use a branch named release"
echo "-t - use a branch named test"
echo ""
echo "Other parmeters"
echo "-c - use apps and pubs previously copied to $HOME/.bundle/$APPS "
echo "     and $HOME/.bundle/pubs directories by firebot and smokebot"
echo "-d dir - directory containing bundle generated by this script"
echo "     [default: $bundle_dir]"
echo "-f - force this script to run"
echo "-g - upload installer file to a Github"
echo "-h - display this message"
echo "-v - show parameters used to build bundle (the bundle is not generated)"
echo "-w - overwrite bundle (if it already exists) "
echo "-x fds_revision - fds revision"
echo "-y smv_revision - smv revision"
echo "-X FDS_TAG - fds tag"
echo "-Y SMV_TAG - smv tag"
echo "   The -x and -y options are only used with the -R cloning option"
exit 0
}

#define default home directories for apps and pubs
app_home=$HOME
if [ -e $HOME/.bundle/bundle_config.sh ]; then
  source $HOME/.bundle/bundle_config.sh
else
  echo ***error: configuration file $HOME/.bundle/bundle_config.sh is not defined
  exit 1
fi

showparms=
ECHO=
bundle_dir=$HOME/.bundle/bundles
USE_CACHE=
OVERWRITE=
UPLOAD_GITHUB=
FORCE=
CURDIR=`pwd`
OUTPUT_DIR=$CURDIR/output
SYNC_REVS=
BRANCH=master
BUNDLE_PREFIX="test"
FDS_REVISION=
SMV_REVISION=
FDS_TAG=
SMV_TAG=
INSTALL=

while getopts 'Bb:cd:fghrtvwX:x:Y:y:' OPTION
do
case $OPTION  in
  B)
   INSTALL=1
   ;;
  b)
   BRANCH=$OPTARG
   ;;
  c)
   USE_CACHE=1
   app_home=$HOME
   ;;
  d)
   bundle_dir=$OPTARG
   ;;
  f)
   FORCE="1"
   ;;
  g)
   UPLOAD_GITHUB=1
   ;;
  h)
   usage;
   ;;
  r)
   BRANCH=release
   ;;
  t)
   BRANCH=test
   ;;
  v)
   showparms=1
   ECHO=echo
   ;;
  w)
   OVERWRITE=1
   ;;
  x)
   FDS_REVISION=$OPTARG
   ;;
  X)
   FDS_TAG=$OPTARG
   ;;
  Y)
   SMV_TAG=$OPTARG
   ;;
esac
done
shift $(($OPTIND-1))

# prevent more than one instance of the make_bundle.sh script from running
# at the same time

if [ "$FDS_TAG" != "" ]; then
  FDS_REVISION=$FDS_TAG
fi
if [ "$SMV_TAG" != "" ]; then
  SMV_REVISION=$SMV_TAG
fi

LOCK_FILE=$HOME/.bundle/make_bundle_lock
if [ "$FORCE" == "" ]; then
  if [ -e $LOCK_FILE ]; then
    echo "***error: another instance of the bundlebot script is running."
    echo "          If this is not the case re-run using the -f option."
    exit 1
  fi
fi
touch $LOCK_FILE

if [ "$shoparms" == "" ]; then
  if [ ! -d $OUTPUT_DIR ]; then
    mkdir $OUTPUT_DIR
  fi
  rm -f $OUTPUT_DIR/*
fi

# determine platform script is running on

if [ "`uname`" == "Darwin" ]; then
  platform=osx
  export FDS_OPENMPIDIR=$openmpi_dir
else
  platform=lnx
fi

if [ "$BRANCH" == "release" ]; then
  BUNDLE_PREFIX=
fi

BUNDLE_PREFIX_FILE=
if [ "$BUNDLE_PREFIX" != "" ]; then
  BUNDLE_PREFIX_FILE=${BUNDLE_PREFIX}_
fi
BRANCHDIR=$BRANCH
if [ "$BRANCH" != "release" ]; then
  BRANCHDIR=
fi
UPLOAD_DIR=
if [ "$BRANCH" == "release" ]; then
  UPLOAD_DIR="bundle_test"
fi

if [ "$showparms" == "1" ]; then
  echo ""
  echo " Parameters"
  echo " ----------"
  echo "              MPI version: $mpi_version"
  echo "            Intel version: $intel_mpi_version"
  if [ "$openmpi_dir" != "" ]; then
    echo "              openmpi dir: $openmpi_dir"
  fi
  if [ "$USE_CACHE" == "1" ]; then
    APPDIR=.bundle
    FDS_PUBDIR=.bundle
    SMV_PUBDIR=.bundle
  else
    APPDIR=.firebot
    FDS_PUBDIR=.firebot/
    SMV_PUBDIR=.smokebot
  fi
  echo "    fds/smv app directory: $app_home/$APPDIR/$BRANCHDIR/$APPS on this computer"
  echo "         bundle directory: $bundle_dir"
  if [ "$OVERWRITE" == "1" ]; then
    echo "         overwrite bundle: yes"
  else
    echo "         overwrite bundle: no"
  fi
  echo ""
fi

export NOPAUSE=1
args=$0
DIR=$(dirname "${args}")
cd $DIR
DIR=`pwd`

return_code=0
if [[ "$USE_CACHE" == "" ]] && [[ "$showparms" == "" ]]; then
  error_log=/tmp/error_log.$$
  rm -f $HOME/.bundle/pubs/*
  ./copy_pubs.sh fds $error_log || return_code=1
  ./copy_pubs.sh smv $error_log || return_code=1

  rm -f $HOME/.bundle/$APPS/*
  ./copy_apps.sh fds $app_home/.firebot/$BRANCHDIR/$APPS                   $error_log || return_code=1
  ./copy_apps.sh smv $app_home/.firebot/$BRANCHDIR/$APPS                   $error_log || return_code=1
 
  if [ "$return_code" == "1" ]; then
    cat $error_log
    echo ""
    echo "bundle generation aborted"
    rm $error_log
    rm -f $LOCK_FILE
    exit 1
  fi
fi

# get fds and smv repo revision used to build apps

FDSREV=$FDS_REVISION
if [ "$FDS_REVISION" == "" ]; then
  if [ -e $HOME/.bundle/$APPS/FDS_REVISION ]; then
    FDSREV=`cat $HOME/.bundle/$APPS/FDS_REVISION`
  else
    FDSREV=fdstest
  fi
fi

SMVREV=$SMV_REVISION
if [ "$SMV_REVISION" == "" ]; then
  if [ -e $HOME/.bundle/$APPS/SMV_REVISION ]; then
    SMVREV=`cat $HOME/.bundle/$APPS/SMV_REVISION`
  else
    SMVREV=smvtest
  fi
fi

cd ../../..
REPO_ROOT=`pwd`
cd $CURDIR
FDSREPODATE=`$REPO_ROOT/bot/Scripts/get_repo_info.sh $REPO_ROOT/fds 1`
FDSREPODATE=_${FDSREPODATE}
FDSREPODATE=
installer_base=${FDSREV}_${SMVREV}${FDSREPODATE}
installer_base_platform=${FDSREV}_${SMVREV}${FDSREPODATE}_${BUNDLE_PREFIX_FILE}$platform
if [[ "$showparms" == "" ]] && [[ "$OVERWRITE" == "" ]]; then
  installer_file=$bundle_dir/${installer_base_platform}.sh
  if [ -e $installer_file ]; then
    echo "***warning: the installer file $installer_file exists."
    echo "             Use the -w option to overwrite it."
    rm -f $LOCK_FILE
    exit 1
  fi
fi

cd $DIR
if [ "$showparms" == "" ]; then
  echo ""
  echo "building installer"
  $ECHO ./bundle_generic.sh $FDSREV $SMVREV $mpi_version $intel_mpi_version $bundle_dir $BUNDLE_PREFIX > $OUTPUT_DIR/stage1
  if [ "$UPLOAD_GITHUB" == "1" ]; then
    echo ""
    echo "uploading installer"
    
    FILELIST=`gh release view $GH_FDS_TAG  -R github.com/$GH_OWNER/$GH_REPO | grep SMV | grep FDS | grep $platform | awk '{print $2}'`
    for file in $FILELIST ; do
      gh release delete-asset $GH_FDS_TAG $file -R github.com/$GH_OWNER/$GH_REPO -y
    done

    gh release upload $GH_FDS_TAG $bundle_dir/${installer_base_platform}.sh         -R github.com/$GH_OWNER/$GH_REPO  --clobber
    gh release upload $GH_FDS_TAG $bundle_dir/${installer_base_platform}.$SHA1EXT   -R github.com/$GH_OWNER/$GH_REPO  --clobber
    gh release upload $GH_FDS_TAG $bundle_dir/${installer_base_platform}.tar.gz     -R github.com/$GH_OWNER/$GH_REPO  --clobber
    if [ "$platform" == "lnx" ]; then
      cd $REPO_ROOT/fds
      FDS_SHORT_HASH=`git rev-parse --short HEAD`
      cd $DIR
      ./setreleasetitle.sh fds $FDS_SHORT_HASH
    fi
  fi
fi
if [ "$ECHO" == "" ]; then
  LATEST=$bundle_dir/FDS_SMV_latest_$platform.sh
  BUNDLEBASE=$bundle_dir/${installer_base_platform}
  if [ -e ${BUNDLEBASE}.sh ]; then
    rm -f  $LATEST
    ln -s ${BUNDLEBASE}.sh $LATEST
  fi
  cp $REPO_ROOT/bot/Bundlebot/nightly/autoinstall.txt $bundle_dir/.
  rm -f  ${BUNDLEBASE}.tar.gz
  rm -rf $BUNDLEBASE
  if [ "$INSTALL" != "" ]; then
    cd $bundle_dir
    cat autoinstall.txt | bash $LATEST >& $HOME/.bundle/bundle_lnx_nightly_install.log
  fi
fi
rm -f $LOCK_FILE
exit 0
